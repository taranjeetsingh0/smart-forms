{"version":3,"sources":["../../src/components/Form/DescriptionText/index.tsx","../../src/components/Form/TextBox/index.tsx","../../src/components/Form/DropDown/index.tsx","../../src/components/Toast/index.tsx","../../src/components/Form/CommonRadioField/index.tsx","../../src/components/Form/CommonCheckBoxField/index.tsx","../../src/components/CommonButton/index.tsx","../../src/components/Form/DateField.tsx","../../src/components/VerticalTab/index.tsx","../../src/components/Form/index.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["DescriptionText","props","className","React","TextBox","required","disabled","descriptionText","error","value","placeholder","multiline","styles","type","helperText","onBlur","onChange","id","undefined","label","description","DropDown","index","randomId","name","key","labelId","options","option","Alert","severity","onAlertClose","handleAlertClose","event","console","reason","open","isAlertOpen","autoHideDuration","onClose","elevation","CommonRadioField","component","control","CommonCheckBoxField","checked","e","CommonButton","color","variant","title","onClick","DateField","useState","useEffect","DateTime","selectedDate","setFinalValue","updateFinalValue","timeStamp","hour","setSelectedDate","Date","setTimeout","handleDateChange","date","utils","DateFnsUtils","container","justify","direction","margin","format","KeyboardButtonProps","style","display","VerticalTabPanel","other","role","hidden","p","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","height","tabs","borderRight","divider","VerticalTab","classes","setValue","orientation","tab","a11yProps","Form","message","response","clearOnSubmit","showClearButton","max","min","inputType","Number","IsJsonString","fieldItem","setErrorMessage","formStateItem","fields","ranjodh","action","state","formState","item","setHelperText","setFormState","isTouched","setIsAlertOpen","setAlertMessage","alertParam","groupName","groupId","changeValue","getHelperText","getValue","hasError","classNames","target","a","newFormState","formItem","field","isValid","setIsTouched","values","exist","onSubmit","clearForm","errors","errorItem","setFormErrors","showAlert","errorMessage","groups","h","group","setFilteredGroups","appCommonForm","renderFields","filteredGroups","tabValue","setTabValue","ranjod","buttonSection","submitButtonName","alert","SmartForm","App","data","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e52846f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport './style.scss';\r\n\r\nexport const DescriptionText = (props: {description: string}) => {\r\n    return (\r\n        <Grid className={'form-description-text'}>\r\n            <p>{props.description}</p>\r\n        </Grid>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport styles from './style.css';\nimport {FieldType} from \"../interface\";\nimport {DescriptionText} from \"../DescriptionText\";\n\ninterface TextBoxType extends FieldType{\n    multiline?: boolean;\n    type: string;\n    onChange: (event: ChangeEvent<any>) => void;\n    onBlur: (event: ChangeEvent<any>) => void;\n}\nexport const TextBox = (props: TextBoxType) => {\n    const {id, className, label, required=false,\n        onBlur, helperText, type, disabled=false, descriptionText='',\n        onChange, error=false, value='', placeholder='', multiline=false} = props;\n    return (\n        <Grid className={`${className}`}>\n            <FormControl className={styles.textBoxFormControl}>\n                <TextField\n                    placeholder={placeholder}\n                    value={value}\n                    disabled={disabled}\n                    error={error}\n                    type={type}\n                    helperText={helperText}\n                    onBlur={onBlur}\n                    multiline={multiline}\n                    onChange={onChange}\n                    required={required}\n                    id={id ? id : undefined}\n                    label={label}\n                />\n                <DescriptionText description={descriptionText} />\n            </FormControl>\n        </Grid>\n    );\n};\n","import React, {ChangeEvent} from \"react\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport styles from './style.css';\nimport {FieldType, OptionsType} from \"../interface\";\nimport {DescriptionText} from \"../DescriptionText\";\n\ninterface DropDownType extends FieldType{\n    options: OptionsType[];\n    index: number;\n    onChange: (event: ChangeEvent<any>) => void;\n    onBlur: (event: ChangeEvent<any>) => void;\n}\nexport const DropDown = (props: DropDownType) => {\n\n    const {options, id, className, name, onChange, onBlur, label,\n        error=false, helperText, disabled=false, descriptionText = '',\n        placeholder='', required=false, value, index} = props;\n    const randomId = `${name.split(' ').join('-')}-${index}-drop-down-input-label`;\n    return (\n        <Grid key={index} className={`${className} ${styles.appDropDown}`} id={id ? id : ''}>\n            <FormControl className={styles.appDropDownFormControl} error={error} disabled={disabled}>\n                <InputLabel id={randomId}>{label}</InputLabel>\n                <Select\n                    className={'app-drop-down-select'}\n                    name={name}\n                    onBlur={onBlur}\n                    placeholder={placeholder}\n                    labelId={randomId}\n                    value={value}\n                    required={required}\n                    onChange={onChange}\n                >\n                    <MenuItem className={'app-drop-down-menu-item'} value=\"\">\n                        None\n                    </MenuItem>\n                    {\n                        options &&\n                        options.map((option, index) => <MenuItem\n                            key={index}\n                            className={'app-drop-down-menu-item'}\n                            value={option.value}>{option.label}</MenuItem>)\n                    }\n                </Select>\n                {error && helperText ? <FormHelperText>{helperText}</FormHelperText> : null}\n                <DescriptionText description={descriptionText} />\n            </FormControl>\n        </Grid>\n    );\n};\n","import React from \"react\";\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\nexport interface AlertType extends AlertProps{\r\n    severity?: 'success' | 'error' | 'info',\r\n    isAlertOpen: boolean;\r\n    onAlertClose: (action: boolean) => void;\r\n    message: string;\r\n}\r\n\r\nexport const Alert = (props: AlertType) => {\r\n    const {severity = 'success', message, isAlertOpen, onAlertClose} = props;\r\n\r\n    const handleAlertClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        console.log('event', event);\r\n        if (reason === 'clickaway') return;\r\n        onAlertClose(false);\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isAlertOpen} autoHideDuration={3000} onClose={handleAlertClose}>\r\n            <MuiAlert elevation={3} onClose={handleAlertClose} severity={severity}>\r\n                {message}\r\n            </MuiAlert>\r\n        </Snackbar>\r\n    );\r\n};","import React, {ChangeEvent} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {FieldType} from \"../interface\";\r\nimport {FormLabel} from \"@material-ui/core\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport {DescriptionText} from \"../DescriptionText\";\r\n\r\ninterface RadioTypeProps extends FieldType{\r\n    onChange: (event: ChangeEvent<any>) => void;\r\n    onBlur: (event: ChangeEvent<any>) => void;\r\n}\r\n\r\nexport const CommonRadioField = (props: RadioTypeProps) => {\r\n    const {id, className, label, required, disabled=false,\r\n        onBlur, helperText, name, options, descriptionText='',\r\n        onChange, error=false, value=''\r\n    } = props;\r\n    return (\r\n        <Grid className={`${className} app-radio-box`} id={id ? id : undefined}>\r\n            <FormControl required={required} component=\"fieldset\" error={error} disabled={disabled}>\r\n                <FormLabel component=\"legend\">{label}</FormLabel>\r\n                <RadioGroup aria-label={label} name={name} value={value} onBlur={onBlur} onChange={onChange}>\r\n                    {options && options.map((option, index) => {\r\n                        return (\r\n                            <FormControlLabel key={`${value}-${index}`} value={option.value} control={<Radio />} label={option.label} />\r\n                        );\r\n                    })}\r\n                </RadioGroup>\r\n                {error && helperText ? <FormHelperText>{helperText}</FormHelperText> : null}\r\n                <DescriptionText description={descriptionText} />\r\n            </FormControl>\r\n        </Grid>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\nimport {FormLabel, Grid} from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {FieldType} from \"../interface\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport styles from './style.css';\nimport {DescriptionText} from \"../DescriptionText\";\n\ninterface CheckBoxTypeProps extends FieldType{\n    onChange: (event: ChangeEvent<any>) => void;\n    onBlur: (event: ChangeEvent<any>) => void;\n}\n\nexport const CommonCheckBoxField = (props: CheckBoxTypeProps) => {\n\n    const {id, className, label,\n        onBlur, helperText, name, disabled=false,\n        onChange, error=false, value='', descriptionText=''\n    } = props;\n\n    function onChangeCheckBox(e: ChangeEvent<any>) {\n        e.target.value = e.target.checked;\n        onChange(e);\n    }\n\n    return (\n        <Grid className={`${className}`} id={id ? id : undefined}>\n            <FormControl component=\"fieldset\" disabled={disabled} error={error} className={styles.formControlCheckBox}>\n                <FormLabel component=\"legend\">{label}</FormLabel>\n                <FormGroup onBlur={onBlur}>\n                    <FormControlLabel\n                        control={<Checkbox checked={value === 'true'} value={!!value} onChange={onChangeCheckBox} name={name} />}\n                        label={label}\n                    />\n                </FormGroup>\n                <FormHelperText>{helperText}</FormHelperText>\n                <DescriptionText description={descriptionText} />\n            </FormControl>\n        </Grid>\n    );\n}\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ninterface ButtonType {\r\n    title: string;\r\n    onClick: (data: any) => void;\r\n    color?: 'primary' | 'secondary',\r\n    variant?: \"contained\" | \"text\" | \"outlined\" | undefined;\r\n    className?: string;\r\n}\r\n\r\nexport const CommonButton = (props: ButtonType) => {\r\n\r\n    const {className, color='primary', variant='contained', onClick, title} = props;\r\n\r\n    return (\r\n        <Button\r\n            className={`${className ? className : ''} common-button-container`}\r\n            onClick={onClick}\r\n            variant={variant}\r\n            color={color}>\r\n            {title}\r\n        </Button>\r\n    );\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {FieldType} from \"./interface\";\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { DateTime } from 'luxon';\r\n\r\ninterface DateFieldType extends FieldType{\r\n    onChange: (event: string) => void;\r\n    onBlur: (event: ChangeEvent<any>) => void;\r\n\r\n}\r\n\r\nexport const DateField = (props: DateFieldType) => {\r\n    const {id, className, label, type,\r\n        disabled=false,\r\n        onChange, value=''} = props;\r\n\r\n    const [finalValue, setFinalValue] = useState<string>('');\r\n\r\n    const [selectedDate, setSelectedDate] = React.useState<Date | null>(\r\n        new Date(),\r\n    );\r\n\r\n    function updateFinalValue() {\r\n        if(selectedDate) {\r\n            try {\r\n                const timeStamp = DateTime.fromISO(selectedDate.toISOString());\r\n                const value = timeStamp.toString();\r\n                onChange(value);\r\n                setFinalValue(value);\r\n            }\r\n            catch (e) {\r\n                setFinalValue('');\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(selectedDate) {\r\n            updateFinalValue();\r\n        }\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        if(value) {\r\n            const timeStamp = DateTime.fromISO(value);\r\n            const hour = timeStamp.toFormat('hh:mm:a');\r\n            setSelectedDate(new Date(`${timeStamp.toISODate()} ${hour}`));\r\n        }\r\n        else {\r\n            setSelectedDate(null);\r\n            setTimeout(() => {\r\n                setSelectedDate(new Date());\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const handleDateChange = (date: Date | null) => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    return (\r\n        <Grid id={id ? id : ''} className={`date-field ${className ? className : ''}`}>\r\n\r\n            <h3>{label}: {finalValue}</h3>\r\n\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <Grid container justify=\"space-around\" direction={\"column\"}>\r\n                    <KeyboardDatePicker\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-dialog\"\r\n                        label=\"Date\"\r\n                        format=\"MM/dd/yyyy\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                        }}\r\n                        disabled={disabled}\r\n                    />\r\n                    <KeyboardTimePicker\r\n                        disabled={disabled}\r\n                        margin=\"normal\"\r\n                        id=\"time-picker\"\r\n                        label=\"Time\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change time',\r\n                        }}\r\n                        style={{display: `${type === 'date' ? 'none' : 'block' }`}}\r\n                    />\r\n                </Grid>\r\n            </MuiPickersUtilsProvider>\r\n\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport styles from './style.css';\n\ninterface VerticalTabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\ninterface VerticalTabProps {\n    tabs: string[];\n    children: any;\n    value: number;\n    setValue: any;\n}\n\nexport function VerticalTabPanel(props: VerticalTabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`vertical-tabpanel-${index}`}\n            aria-labelledby={`vertical-tab-${index}`}\n            className={styles.verticaltabpanel}\n            {...other}\n        >\n            {value === index\n            && (\n                <Box\n                    className={styles.verticaltabboxcontainer}\n                    p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nfunction a11yProps(index: any) {\n    return {\n        id: `vertical-tab-${index}`,\n        'aria-controls': `vertical-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        display: 'flex',\n        height: '400px'\n    },\n    tabs: {\n        borderRight: `1px solid ${theme.palette.divider}`,\n    },\n}));\n\nexport const VerticalTab = (props: VerticalTabProps) => {\n    const classes = useStyles();\n    const {tabs, children, value, setValue} = props;\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        console.log('event', event)\n        setValue(newValue);\n    };\n\n    return (\n        <div className={`${classes.root} vertical-tab-container`}>\n            <Tabs\n                orientation=\"vertical\"\n                variant=\"scrollable\"\n                value={value}\n                onChange={handleChange}\n                aria-label=\"Vertical tabs\"\n                className={classes.tabs}\n            >\n                {tabs.map((tab, index) => {\n                    return <Tab\n                        className={value === index ? 'selected' : ''}\n                        label={tab}\n                        {...a11yProps(index)}\n                    />\n                })}\n\n            </Tabs>\n            {children}\n        </div>\n    );\n}\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport {TextBox} from \"./TextBox\";\nimport {DropDown} from \"./DropDown\";\nimport {\n    ConfigField,\n    FormType,\n} from \"./interface\";\nimport styles from './style.css';\nimport {\n    ErrorMessagesType,\n    IsJsonString,\n    FIELD,\n    MESSAGE\n} from \"@ranjodhbirkaur/constants\";\nimport {Alert} from \"../Toast\";\nimport {CommonRadioField} from \"./CommonRadioField\";\nimport {CommonCheckBoxField} from \"./CommonCheckBoxField\";\nimport {CommonButton} from \"../CommonButton\";\nimport {DateField} from \"./DateField\";\nimport {VerticalTab, VerticalTabPanel} from \"../VerticalTab\";\n\ninterface FormState {\n    label: string;\n    value: string;\n    isTouched: boolean;\n    helperText: string;\n}\n\nconst SET_VALUE_ACTION = 'SET_VALUE_ACTION';\nconst SET_IS_TOUCHED_ACTION = 'SET_IS_TOUCHED_ACTION';\n\nexport interface AlertType {\n    message: string;\n    severity?: 'success' | 'error' | 'info'\n}\n\nexport const Form = (props: FormType) => {\n\n  console.log('s', styles)\n\n    const [isAlertOpen, setIsAlertOpen] = React.useState<boolean>(false);\n    const [alert, setAlertMessage] = React.useState<AlertType>({message: ''});\n    const [tabValue, setTabValue] = React.useState<number>(0);\n    const [filteredGroups, setFilteredGroups] = useState<string[]>([]);\n\n    const [formState, setFormState] = useState<FormState[]>([]);\n    const {className, groups, fields, onSubmit, submitButtonName, response='', clearOnSubmit=false, showClearButton=false} = props;\n\n    function setErrorMessage(name: string) {\n        return `${name} is required`;\n    }\n\n    function changeValue(event: any, field: string, action: string) {\n        const value = event.target.value;\n        let state: FormState[];\n\n        function setHelperText(fieldItem: ConfigField, formStateItem: FormState, value: string) {\n\n            const {max, inputType, min, required, type} = fieldItem;\n            const {label} = formStateItem;\n\n            if(max !== undefined || min!== undefined) {\n                if(max !== undefined && max) {\n                    if((inputType === 'bigText' || inputType === 'text') && type === 'text') {\n                        if(value.length > max && !(!required && (!value || value.length === 0))) {\n                            return `${label} should have maximum ${max} characters`;\n                        }\n                    }\n                    else if(inputType === 'text' && type === 'number') {\n                        if(Number(value) > Number(max) && !(!required && !value)) {\n                            return `${label} should be maximum ${max}`;\n                        }\n                    }\n                }\n                if(min !== undefined && min) {\n                    if((inputType === 'bigText' || inputType === 'text') && type === 'text') {\n                        if(value.length < min && !(!required && (!value || value.length === 0))) {\n                            return `${label} should have minimum ${min} characters`;\n                        }\n                    }\n                    else if(inputType === 'text' && type === 'number') {\n                        if(Number(value) < Number(min) && !(!required && !value)) {\n                            return `${label} should be minimum ${min}`;\n                        }\n                    }\n                }\n            }\n            if(inputType === 'json') {\n                if(!IsJsonString(value)) {\n                    return `${label} is not a valid JSON`;\n                }\n            }\n\n            return (!value && fieldItem.required) ? setErrorMessage(formStateItem.label) : ''\n        }\n\n        const fieldItem = fields.find(ranjodh => ranjodh.label === field);\n        if(fieldItem) {\n            if (action === SET_VALUE_ACTION) {\n                state = formState.map((item) => {\n                    if (item.label === field) {\n                        return {\n                            ...item,\n                            value,\n                            helperText: setHelperText(fieldItem, item, value)\n                        }\n                    }\n                    return item;\n                });\n                setFormState(state);\n            }\n            if (action === SET_IS_TOUCHED_ACTION) {\n                state = formState.map((item) => {\n                    if (item.label === field) {\n                        return {\n                            ...item,\n                            helperText: setHelperText(fieldItem, item, item.value),\n                            isTouched: true\n                        }\n                    }\n                    return item;\n                });\n                setFormState(state);\n            }\n        }\n    }\n\n    useEffect(() => {\n\n        const state = fields.map(field => {\n\n            return {\n                label: field.label,\n                [`value`]: field.value,\n                [`isTouched`]: !!field.helperText,\n                [`helperText`]: field.helperText || ''\n            };\n        });\n        setFormState(state);\n    }, [fields]);\n\n    useEffect(() => {\n\n        if (typeof response === 'string') {\n            if(clearOnSubmit) {\n                clearForm();\n            }\n        }\n        else if(response && response.length) {\n            setFormErrors(response);\n            if (response.length === 1 && !response[0][FIELD] && response[0][MESSAGE]) {\n                showAlert({message: response[0][MESSAGE], severity: \"error\"});\n            }\n            else {\n                let errorMessage = '';\n                response.forEach((item, index) => {\n                    errorMessage += `${index+1}. ${item.message}. `;\n                })\n                showAlert({message: errorMessage, severity: \"error\"});\n            }\n    }\n    }, [response, clearOnSubmit]);\n\n    /*Filter groups which have at least one child element*/\n    useEffect(() => {\n        if(groups && groups.length) {\n            const h = groups.filter(group => {\n                return fields.find(field => field.groupName === group);\n            });\n            setFilteredGroups(h);\n        }\n    }, [groups, fields]);\n\n    function getValue(label: string) {\n        const value = formState.find(item => item.label === label);\n        if (value) {\n            return value.value;\n        }\n        return '';\n    }\n\n    function hasError(label: string) {\n        const value = formState.find(item => item.label === label);\n        if (value) {\n            return !!(value.helperText)\n        }\n        return false;\n    }\n\n    function getHelperText(label: string) {\n        const value = formState.find(item => item.label === label);\n        if (value) {\n            return value.helperText\n        }\n        return '';\n    }\n\n    function showAlert(alertParam: AlertType) {\n        setIsAlertOpen(true);\n        setAlertMessage({\n            message: alertParam.message,\n            severity: alertParam.severity\n        });\n    }\n\n    function renderFields(field: ConfigField, index: number, groupId?: string) {\n        const {inputType, options, groupName='', id, className, name, placeholder, required, type='text', label, disabled=false, descriptionText=''} = field;\n\n        /*If group Id: Field is not grouped*/\n        if(groupId && groupName !== groupId) {\n            return null;\n        }\n        else if(!groupId && groupName) {\n            return null;\n        }\n\n        function onChange(e: ChangeEvent<any>) {\n            changeValue(e, label, SET_VALUE_ACTION)\n        }\n\n        function onBlur(e: ChangeEvent<any>) {\n            changeValue(e, label, SET_IS_TOUCHED_ACTION)\n        }\n\n        const helperText = getHelperText(label);\n        const value = getValue(label);\n        const error = hasError(label);\n        const classNames = `${className} form-field-container-wrapper ${error ? 'red-border' : ''}`;\n\n\n        if(inputType === 'date') {\n            return (\n                <DateField\n                    descriptionText={descriptionText}\n                    type={inputType}\n                    key={index}\n                    name={name}\n                    disabled={disabled}\n                    error={error}\n                    required={required}\n                    placeholder={placeholder}\n                    helperText={helperText}\n                    onChange={(value: any) => {changeValue({target: {value}}, label, SET_VALUE_ACTION)}}\n                    onBlur={onBlur}\n                    label={label}\n                    id={id}\n                    value={value}\n                    className={classNames}\n                />\n            );\n        }\n        if(inputType === 'date-and-time') {\n\n            return (\n                <DateField\n                    descriptionText={descriptionText}\n                    type={inputType}\n                    key={index}\n                    name={name}\n                    disabled={disabled}\n                    error={error}\n                    required={required}\n                    placeholder={placeholder}\n                    helperText={helperText}\n                    onChange={(value: any) => {changeValue({target: {value}}, label, SET_VALUE_ACTION)}}\n                    onBlur={onBlur}\n                    label={label}\n                    id={id}\n                    value={value}\n                    className={classNames}\n                />\n            );\n        }\n        if (inputType === 'text') {\n            return (\n                <TextBox\n                    descriptionText={descriptionText}\n                    type={type}\n                    key={index}\n                    name={name}\n                    disabled={disabled}\n                    error={error}\n                    required={required}\n                    placeholder={placeholder}\n                    helperText={helperText}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    label={label}\n                    id={id}\n                    value={value}\n                    className={classNames}\n                />\n            );\n        }\n        if(inputType === 'dropdown') {\n            return (\n                <DropDown\n                    descriptionText={descriptionText}\n                    disabled={disabled}\n                    onBlur={onBlur}\n                    value={value}\n                    options={options && options.length ? options : []}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    required={required}\n                    index={index}\n                    name={name}\n                    label={label}\n                    error={error}\n                    helperText={helperText}\n                    key={index}\n                    className={classNames}\n                />\n            );\n        }\n        if(inputType === 'bigText') {\n            return (\n                <TextBox\n                    descriptionText={descriptionText}\n                    disabled={disabled}\n                    type={type}\n                    key={index}\n                    name={name}\n                    error={error}\n                    multiline={true}\n                    required={required}\n                    placeholder={placeholder}\n                    helperText={helperText}\n                    onBlur={onBlur}\n                    onChange={onChange}\n                    label={label}\n                    value={value}\n                    id={id}\n                    className={classNames}\n                />\n            );\n        }\n        if(inputType === 'radio') {\n            return (\n                <CommonRadioField\n                    descriptionText={descriptionText}\n                    disabled={disabled}\n                    required={required}\n                    name={name}\n                    placeholder={''}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    label={label}\n                    id={id}\n                    className={classNames}\n                    options={options}\n                    helperText={helperText}\n                />\n            );\n        }\n        if(inputType === 'check-box') {\n            return (\n                <CommonCheckBoxField\n                    descriptionText={descriptionText}\n                    disabled={disabled}\n                    required={required}\n                    name={name}\n                    placeholder={''}\n                    onBlur={onBlur}\n                    onChange={onChange}\n                    value={value}\n                    label={label}\n                    id={id}\n                    className={classNames}\n                    helperText={helperText}\n                />\n            );\n        }\n        return null;\n    }\n\n    async function onClickSubmit() {\n        let isValid = true;\n\n        function setIsTouched() {\n            let newFormState: FormState[] = [];\n            formState.forEach(item => {\n                const formItem = fields.find(field => field.label === item.label);\n                if (formItem && formItem.required && !item.value) {\n                    isValid = false;\n                    newFormState.push({\n                        ...item,\n                        isTouched: true,\n                        helperText: setErrorMessage(item.label)\n                    });\n                }\n                else {\n                    newFormState.push(item);\n                }\n            });\n            setFormState(newFormState);\n        }\n        setIsTouched();\n\n        if(isValid) {\n            const values: {name: string; value: string}[] = [];\n            formState.forEach(item => {\n                const exist = fields.find(field => field.label === item.label);\n                if(exist) {\n                    values.push({\n                        name: exist.name,\n                        value: item.value\n                    });\n                }\n            });\n            await onSubmit(values);\n            if(clearOnSubmit) {\n                clearForm();\n            }\n        }\n    }\n\n    function setFormErrors(errors?: ErrorMessagesType[]) {\n        const values: FormState[] = [];\n        formState.forEach(item => {\n            if (errors && errors.length) {\n                const field = fields.find(fieldItem => fieldItem.label === item.label);\n                if(field) {\n                    const error = errors.find(errorItem => errorItem[FIELD] === field.name);\n                    if (error) {\n                        values.push({\n                            ...item,\n                            helperText: error[MESSAGE],\n                            isTouched: true\n                        });\n                    }\n                    else {\n                        values.push({\n                            ...item\n                        });\n                    }\n                }\n            }\n        });\n        setFormState(values);\n    }\n\n    function clearForm() {\n        const values: FormState[] = [];\n        formState.forEach(item => {\n            values.push({\n                ...item,\n                value: '',\n                helperText: '',\n                isTouched: false\n            });\n        });\n        setFormState(values);\n    }\n\n    return (\n        <Grid className={`${className} ${styles.appCommonForm}`} container justify={'center'} direction={'column'}>\n            {fields.map((option: ConfigField, index) => {\n                return renderFields(option, index);\n            })}\n\n            {/*Render Group Fields*/}\n            {\n                filteredGroups && filteredGroups.length\n                    ? <VerticalTab value={tabValue} setValue={setTabValue} tabs={filteredGroups}>\n                        {\n                            filteredGroups && filteredGroups.length\n                                ? filteredGroups.map((groupName, index) => {\n                                    const exist = fields.filter(ranjod => ranjod.groupName === groupName);\n                                    if(exist && exist.length) {\n                                        return (\n                                            <VerticalTabPanel value={tabValue} index={index}>\n                                                {exist.map((option: ConfigField) => {\n                                                    if(option.groupName === groupName) {\n                                                        return (\n                                                            <div>\n                                                                {renderFields(option, index, groupName)}\n                                                            </div>\n                                                        );\n                                                    }\n                                                    return null;\n                                                })}\n                                            </VerticalTabPanel>\n                                        );\n                                    }\n                                    return  null;\n                                })\n                                : null\n                        }\n                      </VerticalTab>\n                : null\n            }\n\n            <Grid container className={styles.buttonSection}>\n                {\n                    showClearButton\n                    ? <Grid item><CommonButton title={'Clear values'} onClick={clearForm} color={'secondary'} /></Grid>\n                    : null\n                }\n                <Grid item>\n                    <CommonButton\n                        onClick={onClickSubmit}\n                        title={submitButtonName ? submitButtonName : 'Submit'}\n                        color={\"primary\"}\n                    />\n                </Grid>\n            </Grid>\n            <Alert\n                isAlertOpen={isAlertOpen}\n                onAlertClose={setIsAlertOpen}\n                severity={alert.severity}\n                message={alert.message}\n            />\n        </Grid>\n    );\n};\n","import React from 'react'\nimport { Form } from './components/Form'\nimport { FormType } from './components/Form/interface'\n\nexport const SmartForm = (props: FormType) => <Form {...props} />\n","import React from 'react'\n\nimport { SmartForm } from 'forms'\nimport 'forms/dist/index.css'\n\nconst App = () => {\n\n  function onFormSubmit(data: any) {\n    console.log('data', data);\n}\n\n  return <SmartForm \n  fields={[\n    {\n    name: 'name',\n    label: 'name',\n    inputType: 'text',\n    placeholder: 'text',\n    value: '',\n    className: '',\n    type: 'TEXT_FIELD',\n    required: true,\n    id: 'name',\n    max: 20,\n    min: 3,\n},\n    {\n        name: 'number',\n        label: 'number',\n        inputType: 'text',\n        placeholder: 'name',\n        value: '',\n        className: '',\n        type: 'number',\n        required: true,\n        id: 'number',\n        min: 18,\n        max: 90\n    },\n    {\n        name: 'gender',\n        label: 'gender',\n        inputType: 'check-box',\n        placeholder: 'gender',\n        value: '',\n        className: '',\n        type: 'text',\n        required: true,\n        id: 'gender'\n    },\n    {\n        name: 'classes',\n        label: 'classes',\n        inputType: 'dropdown',\n        options: [{label: 'first', value: 'first'}, {label: 'secibd', value: 'second'}],\n        placeholder: 'classes',\n        value: '',\n        className: '',\n        type: 'text',\n        required: true,\n        id: 'classes'\n    },\n    {\n        name: 'section',\n        label: 'section',\n        inputType: 'radio',\n        options: [{label: 'first', value: 'first'}, {label: 'secibd', value: 'second'}],\n        placeholder: 'section',\n        value: '',\n        className: '',\n        type: 'text',\n        required: true,\n        id: 'section'\n    },\n    {\n        name: 'big-text',\n        label: 'big-text',\n        inputType: 'bigText',\n        placeholder: 'big-text',\n        value: '',\n        className: '',\n        type: 'text',\n        required: true,\n        id: 'big-text'\n    },\n\n]}\nclassName={''}\nonSubmit={onFormSubmit}\nresponse={''}\n   />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}